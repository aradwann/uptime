import { HttpService } from '@nestjs/axios';
import { InjectQueue } from '@nestjs/bullmq';
import { Queue } from 'bullmq';
import { Injectable, Logger } from '@nestjs/common';
import { SchedulerRegistry } from '@nestjs/schedule';
import * as https from 'https';
import { Status } from '../reports/entities/report.entity';
import { ReportsService } from '../reports/reports.service';
import { UrlCheck } from '../url-checks/entities/url-check.entity';
/**
 * TODO:
 * WORKFLOW A
 * - report is created when urlCheck is created
 * - cron jobs is initiated when the report is created
 * - setup a cron job
 * - that requests a certain url every interval of time, insert a log and updates the report in the DB
 *
 * WORKFLOW B (which i am implementing now)
 * - on creating urlCheck:
 *  1- create polling request cron job interval
 *  2- insert a log with the request results
 *
 * when requesting a report, it's generated by SQL aggregate functions from the logs
 */

@Injectable()
export class PollingService {
  private readonly logger = new Logger(PollingService.name);

  constructor(
    @InjectQueue('polling') private pollingQueue: Queue,
    private schedulerRegistry: SchedulerRegistry,
    private httpService: HttpService,
    private reportService: ReportsService,
  ) {}

  getPollingRequest(urlCheck: UrlCheck) {
    const agent = new https.Agent({
      rejectUnauthorized: !urlCheck.ignoreSSL,
    });

    const start = Date.now();
    return this.httpService
      .get(`${urlCheck.protocol}://${urlCheck.url}`, {
        baseURL: urlCheck.url,
        url: urlCheck.path,
        // auth: {
        //   username: urlCheck.authentication.username,
        //   password: urlCheck.authentication.password,
        // },
        timeout: urlCheck.timeout * 1000,
        httpsAgent: agent,
      })
      .subscribe((res) => {
        const millis = Date.now() - start;
        if (res.status === urlCheck.assertStatusCode) {
          this.reportService.createLog(urlCheck, Status.UP, millis);
        } else {
          this.reportService.createLog(urlCheck, Status.DOWN);
        }
      });
  }

  /**
   * this created a cron job that's running each interval of time
   * this cron job is doing a polling request and insert a log in the database with its result
   * @param name name of the interval cron job
   * @param milliseconds interval amount of time in milliseconds
   * @param protocol protocol used in polling request
   * @param url url requested
   * @param timeout request timeout in milliseconds
   * @param urlCheck urlCheck entity that sets up this cron job
   * @param path the path after that base url
   * @param username authentication username
   * @param password authentication password
   * @param assertStatusCode status code to assert against defaults to 200
   * @param ignoreSSL ignore ssl defaults to false
   */
  addInterval(urlCheck: UrlCheck) {
    const callback = () => {
      this.logger.warn(
        `cron job with name ${urlCheck.id} and interval ${
          urlCheck.interval * 1000
        } and protocol ${urlCheck.protocol} and url ${urlCheck.url}`,
      );
      this.getPollingRequest(urlCheck);
    };

    const interval = setInterval(callback, urlCheck.interval * 1000);
    this.schedulerRegistry.addInterval(`${urlCheck.id}`, interval);
  }

  /**
   * deletes the cron job of certain name
   * @param name name of the interval cron job
   */
  deleteInterval(name: string) {
    const intervals = this.schedulerRegistry.getIntervals();
    if (name in intervals) {
      this.schedulerRegistry.deleteInterval(name);
      this.logger.warn(`Interval ${name} deleted!`);
    } else {
      this.logger.warn(`Interval ${name} not found!`);
    }
  }
}
