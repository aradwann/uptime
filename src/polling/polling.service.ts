import { HttpService } from '@nestjs/axios';
import { Injectable, Logger } from '@nestjs/common';
import { SchedulerRegistry } from '@nestjs/schedule';
import { Status } from 'src/reports/entities/report.entity';
import { ReportsService } from 'src/reports/reports.service';
import { Protocol, UrlCheck } from 'src/url-checks/entities/url-check.entity';

/**
 * TODO:
 * WORKFLOW A
 * - report is created when urlCheck is created
 * - cron jobs is initiated when the report is created
 * - setup a cron job
 * - that requests a certain url every interval of time, insert a log and updates the report in the DB
 *
 * WORKFLOW B (which i am implementing now)
 * - on creating urlCheck:
 *  1- create polling request cron job interval
 *  2- insert a log with the request results
 *
 * when requesting a report, it's generated by SQL aggregate functions from the logs
 */

@Injectable()
export class PollingService {
  private readonly logger = new Logger(PollingService.name);

  constructor(
    private schedulerRegistry: SchedulerRegistry,
    private httpService: HttpService,
    private reportService: ReportsService,
  ) {}

  /**
   * this created a cron job that's running each interval of time
   * this cron job is doing a polling request and insert a log in the database with its result
   * @param name name of the interval cron job
   * @param milliseconds interval amount of time
   * @param protocol protocol used in polling request
   * @param url url requested
   * @param urlCheck urlCheck entity that sets up this cron job
   */
  addInterval(
    name: string,
    milliseconds: number,
    protocol: Protocol,
    url: string,
    urlCheck: UrlCheck,
  ) {
    const callback = () => {
      this.logger.warn(
        `cron job with name ${name} and interval ${milliseconds} and protocol ${protocol} and url ${url}`,
      );
      const start = Date.now();
      const res = this.httpService
        .get(`${protocol}://${url}`)
        .subscribe((res) => {
          const millis = Date.now() - start;
          if (res.status >= 200 && res.status < 300) {
            this.reportService.createLog(urlCheck, Status.UP, millis);
          } else {
            this.reportService.createLog(urlCheck, Status.DOWN);
          }
        });
    };

    const interval = setInterval(callback, milliseconds);
    this.schedulerRegistry.addInterval(name, interval);
  }

  /**
   * deletes the cron job of certain name
   * @param name name of the interval cron job
   */
  deleteInterval(name: string) {
    console.log({ name });
    this.schedulerRegistry.deleteInterval(name);
    this.logger.warn(`Interval ${name} deleted!`);
  }
}
